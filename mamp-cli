#!/usr/bin/env coffee

# TODO:
# - work more with promises, e.g. while starting and stopping
# - error handling of e.g. shortcuts are not yet defined

argv = require('minimist')(process.argv.slice(2))
_ = require 'lodash'
exec = require('child-process-promise').exec
fs = require 'fs'

getUserHome = ->
  process.env[if process.platform == 'win32' then 'USERPROFILE' else 'HOME']

commands = argv['_']

if commands.length == 0
  console.error "\n!!! Error: No arguments supplied. !!!\n"
  console.log "Usage:"
  console.log "======"
  console.log "\t$ mamp list\n\t  List all available shortcuts\n"
  console.log "\t$ mamp add <shortcut>\n\t  Add the current working directory as shortcut\n"
  console.log "\t$ mamp remove <shortcut>\n\t  Remove the <shortcut> from your shortcuts\n"
  console.log "\t$ mamp switch <shortcut>\n\t  Switch the webroot of the server to <shortcut>\n"
  console.log "\t$ mamp start\n\t  Start mamp\n"
  console.log "\t$ mamp stop\n\t  Stop mamp\n"
  process.exit (0)

exports.Config = class Config
  constructor: ->
    @configFile = "#{getUserHome()}/.mamp-cli"
  
  add: (shortcut, targetDir)  ->
    fs.stat @configFile, (err) =>
      config = {}
      if err == null
        config = @readConfig()
      config[shortcut] = targetDir
      @writeConfig config

  get: (shortcut) ->
    config = @readConfig()
    return config[shortcut]

  fetch: ->
    return @readConfig()

  remove: (shortcut) ->
    config = @readConfig()
    delete config[shortcut]
    @writeConfig(config)

  readConfig: () ->
    config = fs.readFileSync @configFile, 'utf8'
    return JSON.parse config

  writeConfig: (config) ->
    fs.writeFileSync @configFile, JSON.stringify(config)
    

exports.CommandStart = class CommandStart
  constructor: (argv) ->
    exec "/Applications/MAMP/bin/start.sh"
    .then ->
      dont = "do_anything"
    .fail (err) ->
      console.error "Error: Mamp could not be started."
      console.error err
    .progress ->
      console.log "-> MAMP started"
      process.exit(0)

exports.CommandStop = class CommandStop
  constructor: ->
    exec "/Applications/MAMP/bin/stop.sh"
    .then (result) ->
      console.log "-> MAMP stopped"
    .fail (err) ->
      console.error "Error: MAMP could not be stopped."
      console.error err

exports.CommandSwitch = class CommandSwitch
  constructor: (argv) ->
    # stop the server
    new CommandStop
    # get the httpd conf path
    pathToHttpdConf = '/Applications/MAMP/conf/apache/httpd.conf'
    # get the path to the webroot from the config
    newShortcut = argv["_"][1]
    config = new Config
    newTargetDir = config.get(newShortcut)

    # read the httpdconf
    httpdConf = fs.readFileSync pathToHttpdConf, 'utf8'

    # get the current document root
    res = /DocumentRoot "(.*)"/g
      .exec httpdConf
    webroot = res[1]
    # replace the current with the new document root
    newHttpdConf = httpdConf.replace ///#{webroot}///g, newTargetDir
    # write the new httpdconf
    fs.writeFileSync pathToHttpdConf, newHttpdConf
    # restart MAMP, small loading indicator
    setInterval ->
      console.log "."
    , 1000
    setTimeout ->
      new CommandStart
    , 5000

exports.CommandAdd = class CommandAdd
  constructor: (argv) ->
    targetDir = process.cwd()
    shortcut = argv["_"][1]
    config = new Config
    config.add shortcut, targetDir

exports.CommandRemove = class CommandRemove
  constructor: (argv) ->
    shortcut = argv["_"][1]
    config = new Config
    config.remove shortcut

exports.CommandList = class CommandList
  constructor: () ->
    config = new Config
    data = config.fetch()
    console.log "\nShortcut\tDirectory"
    console.log "========\t========="
    for k,v of data
      console.log "#{k} \t\t#{v}"
    console.log "\n"

class Commander
  constructor: (commands, argv) ->
    command = commands[0]
    new exports["Command#{_.capitalize(command)}"](argv)

commander = new Commander commands, argv